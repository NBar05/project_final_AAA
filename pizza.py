import pytest
from typing import List, Dict, Set, Union


class Pizza:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø–∏—Ü—Ü

    Args for init:
    - recipe: –ª–∏—Å—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∏—Ü—Ü—ã
    - emoji: –∑–Ω–∞—á–æ–∫, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–π –ø–∏—Ü—Ü—É (–æ–±—ã—á–Ω–æ —ç–º–æ–¥–∑–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞)
    - size: —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã, –≤–æ–∑–º–æ–∂–Ω—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ L –∏ XL

    """
    def __init__(self, recipe: List[str], emoji: str, size: str = 'L') -> None:
        if size not in ['L', 'XL']:
            raise Exception('Wrong size, you can choose from only two options: L or XL')

        self.size = size

        self.recipe = recipe
        self.emoji = emoji

    def dict(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ —Å–æ –∑–Ω–∞—á–∫–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        return {f'{self.__class__.__name__} {self.emoji}': ' '.join(self.recipe)}

    def __eq__(self, other: object) -> Union[Set, bool]:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–∏—Ü—Ü

        Args:
        - other: –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –ø–∏—Ü—Ü—ã

        Return:
        - –Ω–µ—Ç; –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–ª–∏—á–∏–µ –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö + –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–∏—Ü—Ü—ã

        """
        if not isinstance(other, Pizza):
            return NotImplemented

        print('Products in common:', set(self.recipe).intersection(set(other.recipe)))
        print(f'What else need for {self.__class__.__name__}:', set(self.recipe).difference(set(other.recipe)))

        return set(self.recipe).intersection(set(other.recipe))


class Margherita(Pizza):
    """–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"""
    def __init__(self, size: str = 'L') -> None:
        super().__init__(['tomato sauce', 'mozzarella', 'tomatoes'], 'üßÄ', size)


class Pepperoni(Pizza):
    """–ü–µ–ø–µ—Ä–æ–Ω–∏"""
    def __init__(self, size: str = 'L') -> None:
        super().__init__(['tomato sauce', 'mozzarella', 'pepperoni'], 'üçï', size)


class Hawaiian(Pizza):
    """–ì–∞–≤–∞–π—Å–∫–∞—è"""
    def __init__(self, size: str = 'L') -> None:
        super().__init__(['tomato sauce', 'mozzarella', 'chicken', 'pineapples'], 'üçç', size)


def test_1_Pizza():
    pizza = Pizza(['mozzarella', 'chicken'], 'emoji', 'L')
    assert pizza.dict() == {'Pizza emoji': 'mozzarella chicken'}


def test_2_Margherita():
    pizza_m = Margherita()
    assert pizza_m.dict() == {'Margherita üßÄ': 'tomato sauce mozzarella tomatoes'}


def test_3_Pepperoni():
    pizza_p = Pepperoni('L')
    assert pizza_p.dict() == {'Pepperoni üçï': 'tomato sauce mozzarella pepperoni'}


def test_4_Hawaiian():
    pizza_h = Hawaiian('XL')
    assert pizza_h.dict() == {'Hawaiian üçç': 'tomato sauce mozzarella chicken pineapples'}


def test_5_size_exception():
    with pytest.raises(Exception) as exc_info:
        _ = Hawaiian('XXL')

    assert str(exc_info.value) == 'Wrong size, you can choose from only two options: L or XL'


def test_6_eq_operator():
    pizza_p = Pepperoni('L')
    pizza_h = Hawaiian('XL')

    assert (pizza_p == pizza_h) == {'mozzarella', 'tomato sauce'}


def test_7_eq_operator():
    pizza_p = Pepperoni('L')
    pizza_h = 'Hawaiian'

    assert (pizza_p == pizza_h) is False


if __name__ == '__main__':
    print(Margherita().dict())
    print(Pepperoni('L').dict())
    print(Hawaiian('XL').dict())
